x<-merge(CADUSD, EURUSD, JPYUSD)
x
x['2015-01-01’,]-x['2015-08-24’,]
x["2015-01-01",]-x["2015-08-24",]
x["2015-01-01",]
x["2015-01-01",]%-%x["2015-08-24",]
x["2015-01-01",] %-% x["2015-08-24",]
x["2015-01-01",] - x["2015-08-24",]
x["2015-01-01",]
x["2015-08-24",]
x["2015-01-01",].data - x["2015-08-24",]
x<-c(CADUSD, EURUSD, JPYUSD)
head(x)
Delt(x['2015-01-01'], x['2015-08-24'])
getPrice("APPL")
getPrice("APPLE")
getSymbols("AAPL")
getSymbols("APPL")
getSymbols('AAPL')
AAPL
head(AAPL)
lm(AAPL.Close~AAPL.Volume, data=AAPL)
AAPL[,’AAPL.Close’]
AAPL[,"AAPL.Close"]
AAPL["2015-08-24","AAPL.Close"]
myfit = lm(AAPL.Close~AAPL.Volume, data=AAPL)
summayr(myfit)
summary(myfit)
myfit$residuals
t(summary(myfit))
class(summary(myfit))
plot(myfit)
merge(myfit$residuals)
plot(myfit$residuals)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
plot(AAPL[,'AAPL.Volume'], AAPL[,'AAPL.ClosePrice'])
plot(AAPL[,'AAPL.Volume']~AAPL[,'AAPL.ClosePrice'])
plot(AAPL[,c('AAPL.Volume', 'AAPL.ClosePrice')])
AAPL[,c('AAPL.Volume', 'AAPL.ClosePrice')]
merge(AAPL[,'AAPL.Volume'], AAPL[,'AAPL.Close'])
plot(merge(AAPL[,'AAPL.Volume'], AAPL[,'AAPL.Close']))
matplot(merge(AAPL[,'AAPL.Volume'], AAPL[,'AAPL.Close']))
qplot(AAPL[,'AAPL.Volume'], AAPL[,'AAPL.Close'])
qqplot(AAPL[,'AAPL.Volume'], AAPL[,'AAPL.Close'])
qplot(AAPL[,'AAPL.Volume'], AAPL[,'AAPL.Close'])
diff(√)
diff(AAPL[,'AAPL.Close'])
AAPL$AAPL.Volume
lm(diff(AAPL[,’AAPL.Close’]~AAPL$AAPL.Volume)
lm(diff(AAPL[,"AAPL.Close"]~AAPL$AAPL.Volume)
)
lm(diff(AAPL[,"AAPL.Close"])~AAPL$AAPL.Volume)
sd(AAPL[,"AAPL.Close"])
lm(diff(AAPL[,"AAPL.Close"])~AAPL$AAPL.Volume)
myfit = lm(diff(AAPL[,"AAPL.Close"])~AAPL$AAPL.Volume)
myfit$residuals
summary(myfit)
myfit$residuals
myfit = lm(diff(AAPL[,"AAPL.Close"])~AAPL$AAPL.Volume[-1])
myfit = lm(diff(AAPL[,"AAPL.Close"])~AAPL$AAPL.Volume[,-1])
myfit = lm(diff(AAPL[,"AAPL.Close"])~AAPL$AAPL.Volume[-1,])
AAPL$AAPL.Volume[-1]
myfit = lm(diff(AAPL[,"AAPL.Close"])~AAPL$AAPL.Volume[-1])
myfit = lm(diff(AAPL[,"AAPL.Close"])~AAPL$AAPL.Volume)
myfit$residuals
size(√)
size(diff(AAPL[,"AAPL.Close"]))
dim(diff(AAPL[,"AAPL.Close"]))
dim(√)
dim(AAPL$AAPL.Volume)
head(diff(AAPL[,"AAPL.Close"]))
head(AAPL$AAPL.Volume)
myfit = lm(diff(AAPL[-1,"AAPL.Close"])~AAPL$AAPL.Volume[-1])
myfit$residuals
plot(myfit)
myfit = lm(diff(AAPL[2:2174,"AAPL.Close"])~AAPL$AAPL.Volume[2:2174])
plot(myfit)
myfit$residuals
myAAPL = merge(AAPL, diff(AAPl$AAPL.Volume))
myAAPL = merge(AAPL, diff(AAPL$AAPL.Volume))
head(myAAPL)
myfit <- lm(AAPL.Close~AAPL.Volume.1, data=myAAPL)
plot(myfit)
plot(myfit$residuals)
myAAPL = merge(AAPL, diff(AAPL$AAPL.Close))
myfit <- lm(AAPL.Close~AAPL.Close.1, data=myAAPL)
plot(myfit$residuals)
myfit <- lm(AAPL.Close.1~AAPL.Volume, data=myAAPL)
plot(myfit$residuals)
newdata = AAPL[1,]
newdata
predict(myfit, newdata = newdata)
AAPL$AAPL.Volume
AAPL$AAPL.Volume> 67765500-100 & AAPL$AAPL.Volume< 67765500+100
AAPL$AAPL.Volume> 67765500-100 && AAPL$AAPL.Volume< 67765500+100
AAPL$AAPL.Volume> 67765500-100 & AAPL$AAPL.Volume< 67765500+100
AAPL$AAPL.Volume> 67765500-100 && AAPL$AAPL.Volume< 67765500+100
AAPL$AAPL.Volume> 67765500-100 & AAPL$AAPL.Volume< 67765500+100
AAPL$AAPL.Volume[AAPL$AAPL.Volume> 67765500-100 & AAPL$AAPL.Volume< 67765500+100]
AAPL$AAPL.Volume[which(AAPL$AAPL.Volume> 67765500-100 & AAPL$AAPL.Volume< 67765500+100)]
AAPL$AAPL.Volume[which(AAPL$AAPL.Volume> 67765500-10000 & AAPL$AAPL.Volume< 67765500+10000)]
AAPL$AAPL.Volume[which(AAPL$AAPL.Volume> 67765500-1000000 & AAPL$AAPL.Volume< 67765500+1000000)]
sum(AAPL$AAPL.Volume> 67765500-100 & AAPL$AAPL.Volume< 67765500+100)
sum(AAPL$AAPL.Volume> 67765500-100000 & AAPL$AAPL.Volume< 67765500+100000)
sum(AAPL$AAPL.Volume> 67765500-100000 & AAPL$AAPL.Volume< 67765500+1000000)
AAPL$AAPL.Volume[AAPL$AAPL.Volume> 67765500-1000000 & AAPL$AAPL.Volume< 67765500+1000000]
which(AAPL$AAPL.Volume> 67765500-1000000 & AAPL$AAPL.Volume< 67765500+1000000)
summary(myfit)
install.packages("AppliedPredictiveModelling")
install.packages("caret")
library("AppliedPredictiveModelling")
install.packages("AppliedPredictiveModelling")
install.packages("AppliedPredictiveModeling")
library("AppliedPredictiveModeling")
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
trainIndex
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
trainIndex
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
grep("IL", names(training))
grep("^IL", names(training))
ILcols = grep("^IL", names(training))
training[,ILcols]
mytraining = training[,ILcols]
head(mytraining)
preProcess(mytraining)
preProcess(mytraining, thresh = 0.8)
mymodel = preProcess(mytraining, thresh = 0.8)
summary(mymodel)
mymodel$call
mymodel$pcaComp
mymodel = preProcess(mytraining, thresh = 0.8, method = "pca")
mymodel$pcaComp
mymodel
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILcols = grep("^IL", names(training))
mytraining = training[,ILcols]
mymodel = preProcess(mytraining, thresh = 0.8, method = "pca")
mymodel
predict(mymodel,training)
predict(mymodel,mytraining)
trainPre = predict(mymodel,mytraining)
modelFit = train(training$diagnosis ~ trainPre, method="glm")
modelFit = train(training$diagnosis ~ ., method="glm", data= trainPre)
install.packages('e1071', dependencies=TRUE)
library('e1071')
modelFit = train(training$diagnosis ~ ., method="glm", data= trainPre)
modelFit
summary(modelFit)
testPre = predict(mymodel,test)
testPre = predict(mymodel,testing)
mytesting = testing[,ILcols]
testPre = predict(mymodel,mytesting)
confusionMatrix(testing$diagnosis,predict(modelFit,testPre))
modelFit = train(training$diagnosis ~ ., method="glm", data= mytraining)
confusionMatrix(testing$diagnosis,predict(modelFit,mytesting))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(training$Superplasticizer, 50)
hist(log(training$Superplasticizer), 50)
hist(training$Superplasticizer, 50)
hist(log(training$Superplasticizer), 50)
sum(training$Superplasticizer==0)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
summary(segmentationOriginal$TotalIntenCh2)
summary(segmentationOriginal$FiberWidthCh1)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
detach(segmentationOriginal)
attach(segmentationOriginal)
ls()
Case
training <- segmentationOriginal[Case=="Train",]
head(training)
testing <- segmentationOriginal[Case=="Test",]
set.seed(125)
rpart(Class~., data = training)
rpart::rpart(Class~., training)
mymodel = rpart::rpart(Class~., training)
new_test = testing[4,]
new_test
new_test = testing[1:4,]
new_test
dim = c("TotalIntench2", "FiberWidthCh1", "PerimStatusCh1")
data = c(23000, 10, 2)
data.frame(data,dim)
data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(mymodel, new_data=data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
myprediction = predict(mymodel, new_data=data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
head(myprediction)
data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
myprediction = predict(mymodel, newdata=a)
a = data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
myprediction = predict(mymodel, newdata=a)
predict(mymodel, newdata=a)
predict(mymodel, newdata=b)
a = data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
b =data.frame(TotalIntench2 = 50000, FiberWidthCh1 = 10,VarIntenCh4 = 100)
c  = data.frame(TotalIntench2 = 57000, FiberWidthCh1 = 8,VarIntenCh4 = 100)
d = data.frame( FiberWidthCh1 = 8,VarIntenCh4 = 100, PerimStatusCh1=2)
predict(mymodel, newdata=b)
predict(mymodel, newdata=c)
predict(mymodel, newdata=d)
head(AlzheimerDisease)
data(AlzheimerDisease)
head(AlzheimerDisease)
AlzheimerDisease
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
AlzheimerDisease
ls()
predict(mymodel, newdata=d)
names(training)
type(training)
class(training)
names(a)
predict(mymodel, newdata=a)
predict(mymodel, newdata=testing[1,])
testing[1,]
plot(mymodel)
a
mymodel = train(Class~., method='rpart', data=training)
predict(mymodel, newdata=d)
print(mymodel$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(mymodel)
fancyRpartPlot(mymodel$method)
fancyRpartPlot(mymodel$finalModel)
library(rpart)
fancyRpartPlot(mymodel$finalModel)
library(rpart.plot)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- segmentationOriginal[Case=="Train",]
testing <- segmentationOriginal[Case=="Test",]
set.seed(125)
mymodel = train(Class~., method='rpart', data=training)
a = data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
b =data.frame(TotalIntench2 = 50000, FiberWidthCh1 = 10,VarIntenCh4 = 100)
c  = data.frame(TotalIntench2 = 57000, FiberWidthCh1 = 8,VarIntenCh4 = 100)
d = data.frame( FiberWidthCh1 = 8,VarIntenCh4 = 100, PerimStatusCh1=2)
predict(mymodel, newdata=d)
d
head(testing)
predict(mymodel, newdata=testing)
testing$TotalIntenCh2
which(testing$TotalIntenCh2 == 23000 & testing$FiberWidthCh1 == 10)
which(testing$TotalIntenCh2 == 23000 && testing$FiberWidthCh1 == 10)
which(testing$TotalIntenCh2 == 23000)
testing$TotalIntenCh2 == 23000
which(training$TotalIntenCh2 == 23000)
merge(a,b,c,d)
merge(a,b)
rbind(a,b)
merge(a,b)
merge(a,b,all=T)
merge(testing,merge(merge(merge(a,b,all=T),c,all = T),d,all = T),all = T)
merge(merge(merge(a,b,all=T),c,all = T),d,all = T)
new_data = merge(merge(merge(a,b,all=T),c,all = T),d,all = T)
predict(mymodel, newdata=new_data)
dim(testing)
all_data = merge(new_data,testing)
all_data[1:4,]
all_data[1:5,]
all_data = merge(testing,new_data)
head(all_data)
all_data = merge(testing,new_data,all = T)
head(all_data)
a = data.frame(TotalIntenCh2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
b =data.frame(TotalIntenCh2 = 50000, FiberWidthCh1 = 10,VarIntenCh4 = 100)
c  = data.frame(TotalIntenCh2 = 57000, FiberWidthCh1 = 8,VarIntenCh4 = 100)
d = data.frame( FiberWidthCh1 = 8,VarIntenCh4 = 100, PerimStatusCh1=2)
new_data = merge(merge(merge(a,b,all=T),c,all = T),d,all = T)
all_data = merge(testing,new_data,all = T)
dim(all_data)
all_data[1011:1014,]
new_data = merge(merge(merge(a,b,all=T),c,all = T),d,all = T)
all_data = merge(testing,new_data,all = T)
all_data[1011:1014,]
head(all_data)
new_data
all_data[1011:1014,]
dim(testing)
all_data[1011,]
predict(mymodel, newdata=all_data[1011:1014,])
predict(mymodel, newdata=all_data)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
installed.packages("ElemStatLearn")
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
modelFit <- train(y~.,data=vowel.train,method='rf',prox=T)
varImp(modelFit)
fm = modelFit$finalModel
varImp(fm)
varImp(f)
importance(fm)
set.seed(33833)
rfFit <- train(y~., data = vowel.train, method = 'rf')
gbmFit <- train(y~., data = vowel.train, method = 'gbm')
predict(rfFit, newdata = vowel.test)
head(vowel.test)
vowel.test$y
rfFit <- train(factor(y)~., data = vowel.train, method = 'rf')
gbmFit <- train(factor(y)~., data = vowel.train, method = 'gbm')
predict(rfFit, newdata = vowel.test)
predict(gbmFit, newdata = vowel.test)
rfPredict = predict(rfFit, newdata = vowel.test)
gmbPredict = predict(gbmFit, newdata = vowel.test)
sum(rfPredict == vowel.test&y)
vowel.test&y
head(vowel.test)
head(vowel.test$y)
vowel.test$y
cbind(rfPredict, vowel.test&y)
cbind(rfPredict, vowel.test$y)
sum(rfPredict == vowel.test$y)
sum(rfPredict == vowel.test$y)/length(rfPredict)
sum(bmbPredict == vowel.test$y)/length(rfPredict)
sum(gmbPredict == vowel.test$y)/length(rfPredict)
agreement = gmbPredict == rfPredict
gmbPredict[agreement]
sum(gmbPredict[agreement] == vowel.test$y[agreement])/length(rfPredict[agreement])
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfFit <- train(diagnosis~., data = training, method = 'rf')
gbmFit <- train(diagnosis~., data = training, method = 'gbm', verbose=F)
ldaFit <- train(diagnosis~., data = training, method = 'lda', verbose=F)
rfPredict = predict(rfFit, newdata = testing)
gmbPredict = predict(gbmFit, newdata = testing)
ldaPredict = predict(ldaFit, newdata = testing)
allPredict = data.frame(rfPredict,gmbPredict,ldaPredict,testing$diagnosis)
stackingModel = train(diagnosis~.,data = allPredict,method = 'rf')
rfPredict = predict(rfFit, newdata = testing)
gmbPredict = predict(gbmFit, newdata = testing)
ldaPredict = predict(ldaFit, newdata = testing)
length(rfPredict)
length(gmbPredict)
length(ldaPredict)
length(testing$diagnosis)
allPredict = data.frame(rfPredict,gmbPredict,ldaPredict,testing$diagnosis)
allPredict
stackingModel = train(testing.diagnosis~.,data = allPredict,method = 'rf')
compPredict = predict(stackingModel,newdata = allPredict)
compPredict
sum(compPredict==testing$diagnosis)
sum(compPredict==testing$diagnosis)/82
sum(compPredict==testing$diagnosis)/length(testing$diagnosis)
sum(compPredict==testing$diagnosis)/length(testing$diagnosis)
sum(rfPredict==testing$diagnosis)/length(testing$diagnosis)
sum(gmbPredict==testing$diagnosis)/length(testing$diagnosis)
sum(ldaPredict==testing$diagnosis)/length(testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]set.seed(3523)
library(AppliedPredictiveModeling)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
head(training)
data<- train(CompressiveStrength~.,data=training, method="lasso", metric="RMSE")
myfit<- train(CompressiveStrength~.,data=training, method="lasso", metric="RMSE")
lassoPredict = predict(myfit, newdata = testing)
head(lassoPredict)
?plot.enet
install.packages("elasticnet")
install.packages("elasticnet")
library("elasticnet")
myfit<- train(CompressiveStrength~.,data=training, method="lasso", metric="RMSE")
myfit<- enet(CompressiveStrength~.,data=training, method="lasso", metric="RMSE")
head(training)
myfit<- train(y = training$CompressiveStrength,x=training[,-9])
myfit<- enet(y = training$CompressiveStrength,x=training[,-9])
myfit<- enet(y = training$CompressiveStrength,x=training[,-9], lambda = 0)
training[,-9]
head(training[,-9])
head(training[,9])
head(training)
myfit<- enet(y = training$CompressiveStrength,x=training[,-9])
myfit<- enet(y = training[,9],x=training[,-9])
myfit<- enet(y = training[,9],x=as.matrix(training[,-9]))
plot(myfit)
plot(myfit, "norm",   label=TRUE)
plot(myfit, "lambda", label=TRUE)
op <- par(mfrow=c(1, 2))
plot(myfit, "norm",   label=TRUE)
plot(myfit, "lambda", label=TRUE)
plot(myfit, "penalty",   label=TRUE)
plot(myfit, "L1norm", label=TRUE)
plot(myfit, "penalty",   label=TRUE)
op <- par(mfrow=c(1, 1))
plot(myfit, "penalty",   label=TRUE)
library(lubridate)  # For year() function below
install.packages("lubridate")
library("lubridate")
getwd()
dir()
setwd("git/practical_machine_learning/")
dir()
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
bats(tstrain)
fit <- bats(tstrain)
plot(forecast(fit))
plot(forecast(fit)); line(ts(testing$visitsTumblr))
library(forecast)
fit <- bats(tstrain)
plot(forecast(fit)); line(ts(testing$visitsTumblr))
plot(forecast(fit)); lines(ts(testing$visitsTumblr), colors = "red")
plot(forecast(fit)); lines(ts(testing$visitsTumblr), col = "red")
forecast(fit)
ts(testing$visitsTumblr)
ts(training$visitsTumblr)
head(training)
